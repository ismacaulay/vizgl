#pragma once
#include <string>

namespace ContinuousMappingShaderSource {

const std::string VertexShader = ""
"precision highp float;                                                         \n"
"attribute vec3 a_position;                                                     \n"
"attribute float a_data;                                                        \n"
"                                                                               \n"
"uniform mat4 u_model;                                                          \n"
"uniform mat4 u_view;                                                           \n"
"uniform mat4 u_proj;                                                           \n"
"                                                                               \n"
"varying float v_data;                                                          \n"
"                                                                               \n"
"void main() {                                                                  \n"
"   gl_Position = u_proj * u_view * u_model * vec4(a_position, 1.0);            \n"
"   v_data = a_data;                                                            \n"
"}                                                                              \n";

const std::string FragmentShader = ""
"precision highp float;                                                         \n"
"varying float v_data;                                                          \n"
"                                                                               \n"
"uniform float u_data_min;                                                      \n"
"uniform float u_data_max;                                                      \n"
"uniform sampler2D u_texture0;                                                  \n"
"                                                                               \n"
"void main() {                                                                  \n"
"   float x = (v_data - u_data_min) / (u_data_max - u_data_min);                \n"
"   x = clamp(x, 0.0, 1.0);                                                     \n"
"   gl_FragColor = texture2D(u_texture0, vec2(x, 0.5));                         \n"
"}                                                                              \n";

const std::string VertexShaderWithWireframe = ""
"precision highp float;                                                         \n"
"attribute vec3 a_position;                                                     \n"
"attribute vec3 a_barycentric;                                                  \n"
"attribute float a_data;                                                        \n"
"                                                                               \n"
"uniform mat4 u_model;                                                          \n"
"uniform mat4 u_view;                                                           \n"
"uniform mat4 u_proj;                                                           \n"
"                                                                               \n"
"varying vec3 v_barycentric;                                                    \n"
"varying float v_data;                                                          \n"
"                                                                               \n"
"void main() {                                                                  \n"
"   gl_Position = u_proj * u_view * u_model * vec4(a_position, 1.0);            \n"
"   v_barycentric = a_barycentric;                                              \n"
"   v_data = a_data;                                                            \n"
"}                                                                              \n";

const std::string FragmentShaderWithWireframe = ""
"#extension GL_OES_standard_derivatives : enable                                \n"
"precision highp float;                                                         \n"
"varying vec3 v_barycentric;                                                    \n"
"varying float v_data;                                                          \n"
"                                                                               \n"
"uniform float u_data_min;                                                      \n"
"uniform float u_data_max;                                                      \n"
"uniform sampler2D u_texture0;                                                  \n"
"                                                                               \n"
"float edgeFactor() {                                                           \n"
"    vec3 d = fwidth(v_barycentric);                                            \n"
"    vec3 a3 = smoothstep(vec3(0.0), d*1.0, v_barycentric);                     \n"
"    return min(min(a3.x, a3.y), a3.z);                                         \n"
"}                                                                              \n"
"                                                                               \n"
"void main() {                                                                  \n"
"   float x = (v_data - u_data_min) / (u_data_max - u_data_min);                \n"
"   x = clamp(x, 0.0, 1.0);                                                     \n"
"   vec4 textureColor = texture2D(u_texture0, vec2(x, 0.5));                    \n"
"   gl_FragColor = vec4(mix(vec3(0.0), textureColor.rgb, edgeFactor()), 1.0);   \n"
"}                                                                              \n";

}
